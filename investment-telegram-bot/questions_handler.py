from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from logic import main


available_answers = ["–¥–∞", "–Ω–µ—Ç"]
available_periods = ["–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞", "1-3 –≥–æ–¥–∞", "–±–æ–ª–µ–µ 3—Ö –ª–µ—Ç"]


class QuestionAnswer(StatesGroup):
    waiting_for_first_answer = State()
    waiting_for_sum = State()
    waiting_for_period = State()


async def start_command(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    await state.finish()
    await message.answer(f"""
–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å!
""")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = KeyboardButton("–î–∞")
    button_2 = KeyboardButton("–ù–µ—Ç")
    kb.add(button_1).insert(button_2)

    await state.set_state(QuestionAnswer.waiting_for_first_answer.state)

    await message.answer(text="–ù–∞—á–Ω–µ–º?", reply_markup=kb)


async def user_start_answer(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    if message.text.lower() not in available_answers:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.")
        return

    if message.text == "–î–∞":
        await message.answer(text="–ü–æ–≥–Ω–∞–ª–∏!",
                             reply_markup=ReplyKeyboardRemove())

        await message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö üíµ\n"
                                  "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 1000 –¥–æ–ª–ª–∞—Ä–æ–≤.")

        await state.set_state(QuestionAnswer.waiting_for_sum.state)

    elif message.text == "–ù–µ—Ç":
        await message.answer(text="–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±—É–¥—É –Ω—É–∂–µ–Ω.",
                             reply_markup=ReplyKeyboardRemove())
        await state.finish()


async def choose_sum(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    try:
        invest_sum = int(message.text)
        if invest_sum < 1000:
            await message.answer("–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1000 –¥–æ–ª–ª–∞—Ä–æ–≤.")
            return
        else:
            await state.update_data(chosen_sum=invest_sum)

            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            button_1 = KeyboardButton("–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞")
            button_2 = KeyboardButton("1-3 –≥–æ–¥–∞")
            button_3 = KeyboardButton("–±–æ–ª–µ–µ 3—Ö –ª–µ—Ç")
            kb.add(button_1).insert(button_2).insert(button_3)

            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É.",
                                 reply_markup=kb)
            await state.set_state(QuestionAnswer.waiting_for_period.state)

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return


async def choose_period(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    if message.text not in available_periods:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.")
        return

    await state.update_data(chosen_period=message.text)
    user_data = await state.get_data()
    await message.answer(f"–í–∞—à–∞ —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {user_data['chosen_sum']}.\n"
                         f"–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {user_data['chosen_period']}",
                         reply_markup=ReplyKeyboardRemove())
    await message.answer("–§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å...")

    portfolio_text = main(int(user_data['chosen_sum']), user_data['chosen_period'])

    await message.answer(portfolio_text, parse_mode="HTML")
    await state.finish()


def register_handlers(dp: Dispatcher):

    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –±–æ—Ç.

    :param dp: –î–∏—Å–ø–∞—Ç—á–µ—Ä.
    :return: None
    """

    dp.register_message_handler(start_command, commands="start", state="*")
    dp.register_message_handler(user_start_answer, state=QuestionAnswer.waiting_for_first_answer)
    dp.register_message_handler(choose_sum, state=QuestionAnswer.waiting_for_sum)
    dp.register_message_handler(choose_period, state=QuestionAnswer.waiting_for_period)
